apiVersion: v1
items:
- apiVersion: v1
  data:
    apicast-policy.json: 
    external_auth_service.lua: 
    init.lua: cmV0dXJuIHJlcXVpcmUoJ2V4dGVybmFsX2F1dGhfc2VydmljZScpCg==
  kind: Secret
  metadata:
    creationTimestamp: "2023-09-20T08:51:16Z"
    name: external-auth-policy
    namespace: 3scale
    resourceVersion: "258798"
    uid: e31ad1a5-2c02-4190-a64c-3bab28ec8916
  type: Opaque
kind: List
metadata:
  resourceVersion: ""
